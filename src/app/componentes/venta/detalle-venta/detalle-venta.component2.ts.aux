import { Component, Input, OnChanges } from '@angular/core';
import { MatTableDataSource } from '@angular/material';
import {MatTooltipModule} from '@angular/material/tooltip';
import Swal from 'sweetalert2';
import { FormControl, Validators } from '@angular/forms';

export interface Productos {
  codigoBarra: string;
  nombre: string;
  precio: number;
  stock: number;

}

const datoIventario: Productos[] = [
  {codigoBarra: 'BKY00001', nombre: 'Producto 1', stock: 0, precio: 1000},
  {codigoBarra: 'BKY00002', nombre: 'Producto 2', stock: 0, precio: 2000},
  {codigoBarra: 'BKY00003', nombre: 'Producto 3', stock: 0, precio: 3000},
  {codigoBarra: 'BKY00004', nombre: 'Producto 4', stock: 0, precio: 4000},
  {codigoBarra: 'BKY00005', nombre: 'Producto 5', stock: 0, precio: 5000},
  {codigoBarra: 'BKY00006', nombre: 'Producto 6', stock: 0, precio: 6000},
  {codigoBarra: 'BKY00007', nombre: 'Producto 7', stock: 0, precio: 7000},
  {codigoBarra: 'BKY00008', nombre: 'Producto 8', stock: 0, precio: 8000},
  {codigoBarra: 'BKY00009', nombre: 'Producto 9', stock: 0, precio: 9000},
  {codigoBarra: 'BKY00010', nombre: 'Producto 10', stock: 0, precio: 10000},
  {codigoBarra: 'BKY00011', nombre: 'Producto 11', stock: 0, precio: 11000},
  {codigoBarra: 'BKY00012', nombre: 'Producto 12', stock: 0, precio: 12000},
  {codigoBarra: 'BKY00013', nombre: 'Producto 13', stock: 0, precio: 13000},
  {codigoBarra: 'BKY00014', nombre: 'Producto 14', stock: 0, precio: 14000},
  {codigoBarra: 'BKY00015', nombre: 'Producto 15', stock: 0, precio: 15000},
  {codigoBarra: 'BKY00016', nombre: 'Producto 16', stock: 0, precio: 16000},
  {codigoBarra: 'BKY00017', nombre: 'Producto 17', stock: 0, precio: 17000},
  {codigoBarra: 'BKY00018', nombre: 'Producto 18', stock: 0, precio: 18000},
  {codigoBarra: 'BKY00019', nombre: 'Producto 19', stock: 0, precio: 19000},
  {codigoBarra: 'BKY00020', nombre: 'Producto 20', stock: 0, precio: 20000},
];

// export interface DetalleFacturaElemento {
//    codigoBarra: string;
//    cantidad: number;
//    detalleProd: string;
//    descuento: number;
//    precio: number;
//    }

@Component({
  selector: 'app-detalle-venta',
  templateUrl: './detalle-venta.component.html',
  styleUrls: ['./detalle-venta.component.css']
})
export class DetalleVentaComponent implements OnChanges {

    constructor() {
    }
    @Input() codigoBarraInput: string;
    @Input() duplicadoInput: number;

    public totalFilas: number;
    lectorCodBarra: string;

    displayedColumns =   ['index',  'cantidad', 'detalleProd', 'descuento', 'precio', 'subTotal', 'eliminar'];
    dataSource = new MatTableDataSource(DETALLE_FACTURA);

    descuento = new FormControl('', [
      Validators.required,
      Validators.min(0),
      Validators.max(100)
    ]);

    cantidad = new FormControl('', [
      Validators.required,
      Validators.min(0)
    ]);

    refresca() {
      console.log('detallerefresca: ', DETALLE_FACTURA);
      this.dataSource = new MatTableDataSource(DETALLE_FACTURA);
    }

    ngOnChanges() {
      if (this.codigoBarraInput !== undefined) {
         // this.agregaProductoDetalle(this.codigoBarraInput);
          DETALLE_FACTURA[1].cantidad = DETALLE_FACTURA[1].cantidad + 1;
          this.refresca();
      }
    }

    agregaProductoDetalle(codBarra) {
     //   const obj = DETALLE_FACTURA.filter(function(valor) {
     //       return valor.detalleProd === prod;
     //   });
     //   console.log('arreglo: ', obj);
     //   return obj;

     const index: number = this.buscaEnDetalle(codBarra); // Busca en la tabla
     if (index === -1) {
       // agrega fila
        this.buscaIventario(codBarra);
     } else {
       // modifica fila
       DETALLE_FACTURA[index].cantidad = DETALLE_FACTURA[index].cantidad + 1;
     }
     this.refresca();
    }

    buscaEnDetalle(codBarra) {
      return DETALLE_FACTURA.indexOf(DETALLE_FACTURA.find(x => x.codigoBarra === codBarra));
    }

    buscaIventario(codBarra) {
      console.log('detalle4.1: ', DETALLE_FACTURA);
      const obj = datoIventario.filter(function(valor) {
           return valor.codigoBarra === codBarra;
      });
      console.log('detalle4.2: ', DETALLE_FACTURA);
      if (obj.length === 0) {
        Swal.fire({
          type: 'error',
          title: 'INGRESO',
          text: 'Producto no existe',
          footer: 'Vuelva a ingresar'
        });
        return false;
      }
      console.log('obj: ', obj);
      console.log('detalle4.3: ', DETALLE_FACTURA);
     // this.totalFilas = DETALLE_FACTURA.length + 1;
      DETALLE_FACTURA.push({codigoBarra: obj[0].codigoBarra, cantidad: 1, detalleProd: obj[0].nombre, descuento: 0, precio: obj[0].precio});
      console.log('detalle4.4: ', DETALLE_FACTURA);
      return obj;
    }

    eliminar(codBarraElimina, prodElimina) {
      Swal.fire({
        title: 'ELIMINA PRODUCTO FACTURA',
        text: prodElimina,
        type: 'warning',
        showCancelButton: true,
        cancelButtonText: 'CANCELAR',
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'ELIMINAR'
      }).then((result) => {
        if (result.value) {
          const index: number = this.buscaEnDetalle(codBarraElimina);
          console.log('indice elimina: ', prodElimina);
          DETALLE_FACTURA.splice(index, 1); // Elimina fila
          Swal.fire({
            position: 'top-end',
            type: 'success',
            title: 'Se elimino con Ã‰xito',
            showConfirmButton: false,
            timer: 1500
          });
        }
        this.refresca();
      });
    }

    onDescuentoChange(codBarraModifica) {
      console.log(this.descuento.value);
      console.log(codBarraModifica);
      // console.log(this.descuento.valid);
      const index: number = this.buscaEnDetalle(codBarraModifica);
      console.log('indice', index);

      if (this.descuento.valid === false) {
          Swal.fire({
            type: 'error',
            title: '% Descuento',
            text: 'El rango debe ser [0-100]',
            footer: ''
          });
        //  DETALLE_FACTURA[index].descuento = 0;
      } else {
        DETALLE_FACTURA[index].descuento = this.descuento.value;
        this.refresca();
      }

    }

    onCantidadChange(codBarraModifica) {
      // console.log(this.descuento.valid);
      const index: number = this.buscaEnDetalle(codBarraModifica);

      if (this.cantidad.valid === false) {
          Swal.fire({
            type: 'error',
            title: 'Cantidad',
            text: 'El valor debe ser Mayor o Igual a 0',
            footer: ''
          });
        //  console.log('indice ve:', index);
        //  DETALLE_FACTURA[index].cantidad = 0;
      } else {
        DETALLE_FACTURA[index].cantidad = this.cantidad.value;
        this.refresca();
      }
    }

 //   buscaAgregaCodigoBarra() {
 //     console.log('detalle1: ', DETALLE_FACTURA);
 //     this.agregaProductoDetalle(this.lectorCodBarra);
 //     this.lectorCodBarra = '';
 //   }
}
