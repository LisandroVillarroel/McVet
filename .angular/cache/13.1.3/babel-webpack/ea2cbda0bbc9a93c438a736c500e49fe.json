{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { ViewModeDirective } from './../../../directivas/view-mode.directive';\nimport { EditModeDirective } from './../../../directivas/edit-mode.directive';\nimport { fromEvent, Subject } from 'rxjs';\nimport { filter, take, switchMapTo } from 'rxjs/operators';\nimport { untilDestroyed } from 'ngx-take-until-destroy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction EditableComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nexport let EditableComponent = /*#__PURE__*/(() => {\n  class EditableComponent {\n    constructor(host) {\n      this.host = host;\n      this.update = new EventEmitter();\n      this.editMode = new Subject();\n      this.editMode$ = this.editMode.asObservable();\n      this.mode = 'view';\n    } // tslint:disable-next-line:use-life-cycle-interface\n\n\n    ngOnInit() {\n      this.viewModeHandler();\n      this.editModeHandler();\n    }\n\n    toViewMode() {\n      this.update.next();\n      this.mode = 'view';\n    }\n\n    get element() {\n      return this.host.nativeElement;\n    }\n\n    viewModeHandler() {\n      fromEvent(this.element, 'click').pipe(untilDestroyed(this)).subscribe(() => {\n        this.mode = 'edit';\n        this.editMode.next(true);\n      });\n    }\n\n    editModeHandler() {\n      const clickOutside$ = fromEvent(document, 'click').pipe(filter(({\n        target\n      }) => this.element.contains(target) === false), take(1));\n      this.editMode$.pipe(switchMapTo(clickOutside$), untilDestroyed(this)).subscribe(event => this.toViewMode());\n    }\n\n    get currentView() {\n      return this.mode === 'view' ? this.viewModeTpl.tpl : this.editModeTpl.tpl;\n    } // tslint:disable-next-line:use-life-cycle-interface\n\n\n    ngOnDestroy() {}\n\n  }\n\n  EditableComponent.ɵfac = function EditableComponent_Factory(t) {\n    return new (t || EditableComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  EditableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditableComponent,\n    selectors: [[\"editable\"]],\n    contentQueries: function EditableComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, ViewModeDirective, 5);\n        i0.ɵɵcontentQuery(dirIndex, EditModeDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewModeTpl = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.editModeTpl = _t.first);\n      }\n    },\n    outputs: {\n      update: \"update\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngTemplateOutlet\"]],\n    template: function EditableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, EditableComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.currentView);\n      }\n    },\n    directives: [i1.NgTemplateOutlet],\n    styles: [\"\"]\n  });\n  return EditableComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}