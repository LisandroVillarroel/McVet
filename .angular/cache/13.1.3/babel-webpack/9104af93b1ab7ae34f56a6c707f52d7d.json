{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from './../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http) {\n      this.http = http; // AUTH_SERVER: string = 'http://localhost:3000';\n\n      this.authSubject = new BehaviorSubject(false);\n      this.currentUsuarioSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUsuario')));\n      this.currentUsuario = this.currentUsuarioSubject.asObservable();\n    }\n\n    get currentUsuarioValue() {\n      return this.currentUsuarioSubject.value;\n    }\n\n    login(user) {\n      return this.http.post(`${environment.apiUrl}/login`, user).pipe(tap(res => {\n        if (res) {\n          // guardar token\n          this.grabaToken(res.usuarioDato.accessToken, res.usuarioDato);\n          this.currentUsuarioSubject.next(res);\n        }\n      }));\n    }\n\n    grabaToken(token, usuario) {\n      console.log('usuario emp:', JSON.stringify(usuario));\n      localStorage.setItem('ACCESS_TOKEN', token);\n      localStorage.setItem('currentUsuario', JSON.stringify(usuario));\n      this.token = token;\n    } //// login(username: string, password: string) {\n    ////  return this.http.post<any>(`${environment.apiUrl}/users/authenticate`, { username, password })\n    ////      .pipe(map(user => {\n    ////          // iniciar sesión correctamente si hay un token jwt en la respuesta\n    ////          if (user && user.token) {\n    ////              // almacenar detalles de usuario y token jwt en almacenamiento local\n    ////              // para mantener al usuario conectado entre actualizaciones de página\n    ////              localStorage.setItem('currentUser', JSON.stringify(user));\n    ////              this.currentUserSubject.next(user);\n    ////          }\n    ////          return user;\n    ////      }));\n    //// }\n\n\n    getToken() {\n      return localStorage.getItem('ACCESS_TOKEN');\n    }\n\n    getCurrentUser() {\n      const usuario_string = localStorage.getItem('currentUsuario');\n\n      if (usuario_string === null || usuario_string === undefined || usuario_string.trim().length === 0) {\n        return null;\n      } else {\n        const usuario = JSON.parse(usuario_string);\n        return usuario;\n      }\n    }\n\n    logout() {\n      // remove user from local storage to log user out\n      this.token = '';\n      localStorage.removeItem('ACCESS_TOKEN');\n      localStorage.removeItem('currentUsuario');\n      this.currentUsuarioSubject.next(null);\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}