{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@app/servicios/examen.service\";\nimport * as i3 from \"@app/servicios/usuario.service\";\nimport * as i4 from \"@app/servicios/cliente.service\";\nimport * as i5 from \"@app/servicios/especie.service\";\nimport * as i6 from \"@app/servicios/raza.service\";\nimport * as i7 from \"@app/servicios/doctor-solicitante.service\";\nimport * as i8 from \"@app/servicios/ficha.service\";\nimport * as i9 from \"@app/autentica/_services\";\nexport let AgregaFichaComponent = /*#__PURE__*/(() => {\n  class AgregaFichaComponent {\n    constructor(dialogRef, data, examenService, usuarioService, clienteService, especieService, razaService, doctorSolicitanteService, fichaService, authenticationService) {\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.examenService = examenService;\n      this.usuarioService = usuarioService;\n      this.clienteService = clienteService;\n      this.especieService = especieService;\n      this.razaService = razaService;\n      this.doctorSolicitanteService = doctorSolicitanteService;\n      this.fichaService = fichaService;\n      this.authenticationService = authenticationService;\n      this.fechaActual = new Date();\n      this.datoSexo = [{\n        nombre: 'Hembra',\n        id: 'Hembra'\n      }, {\n        nombre: 'Macho',\n        id: 'Macho'\n      }];\n      this.visibleHemograma = false;\n      this.visibleExamen1 = false;\n      this.visibleExamen2 = false;\n      this.idCliente = new FormControl('', [Validators.required]);\n      this.idExamen = new FormControl('', [Validators.required]);\n      this.nombrePropietario = new FormControl('', [Validators.required]);\n      this.nombrePaciente = new FormControl('', [Validators.required]);\n      this.idEspecie = new FormControl('', [Validators.required]);\n      this.idRaza = new FormControl('', [Validators.required]);\n      this.edad = new FormControl('', [Validators.required]);\n      this.sexo = new FormControl('', [Validators.required]);\n      this.idDoctorSolicitante = new FormControl('', [Validators.required]);\n      this.hemograma = new FormControl('');\n      this.examen1 = new FormControl('');\n      this.examen2 = new FormControl('');\n      this.idUsuarioHemograma = new FormControl('');\n      this.idUsuarioExamen1 = new FormControl('');\n      this.idUsuarioExamen2 = new FormControl('');\n      this.agregaFicha = new FormGroup({\n        idCliente: this.idCliente,\n        idExamen: this.idExamen,\n        nombrePropietario: this.nombrePropietario,\n        nombrePaciente: this.nombrePaciente,\n        idEspecie: this.idEspecie,\n        idRaza: this.idRaza,\n        edad: this.edad,\n        sexo: this.sexo,\n        idDoctorSolicitante: this.idDoctorSolicitante,\n        hemograma: this.hemograma,\n        examen1: this.examen1,\n        examen2: this.examen2,\n        idUsuarioHemograma: this.idUsuarioHemograma,\n        idUsuarioExamen1: this.idUsuarioExamen1,\n        idUsuarioExamen2: this.idUsuarioExamen2\n      });\n      this.authenticationService.currentUsuario.subscribe(x => this.currentUsuario = x);\n      this.usuario = data.usuario;\n      this.cargaCliente();\n      this.cargaExamen();\n      this.cargaUsuario();\n      this.cargaEspecie();\n      this.cargaRaza();\n    }\n\n    getErrorMessage(campo) {\n      if (campo === 'idCliente') {\n        return this.idCliente.hasError('required') ? 'Debes Seleccionar Cliente' : '';\n      }\n\n      if (campo === 'idExamen') {\n        return this.idExamen.hasError('required') ? 'Debes Seleccionar ExÃ¡men' : '';\n      }\n\n      if (campo === 'nombrePropietario') {\n        return this.nombrePropietario.hasError('required') ? 'Debes ingresar Nombre Propietario' : '';\n      }\n\n      if (campo === 'nombrePaciente') {\n        return this.nombrePaciente.hasError('required') ? 'Debes ingresar Nombre Paciente' : '';\n      }\n\n      if (campo === 'idEspecie') {\n        return this.idEspecie.hasError('required') ? 'Debes Seleccionar Especie' : '';\n      }\n\n      if (campo === 'idRaza') {\n        return this.idRaza.hasError('required') ? 'Debes Seleccionar Raza' : '';\n      }\n\n      if (campo === 'edad') {\n        return this.edad.hasError('required') ? 'Debes Ingresar Edad' : '';\n      }\n\n      if (campo === 'sexo') {\n        return this.sexo.hasError('required') ? 'Debes Seleccionar Sexo' : '';\n      }\n\n      if (campo === 'idDoctorSolicitante') {\n        return this.idDoctorSolicitante.hasError('required') ? 'Debes Ingresar Dr. Solicitante' : '';\n      }\n\n      return '';\n    }\n\n    ngOnInit() {}\n\n    cargaExamen() {\n      this.examenService.getDataExamen(this.data.empresa_Id).subscribe(res => {\n        console.log('examen:', res['data']);\n        this.datoExamen = res['data'];\n\n        for (var x of this.datoExamen) {\n          console.log(x);\n        }\n      }, // console.log('yo:', res as PerfilI[]),\n      error => {\n        console.log('error carga:', error);\n        Swal.fire('ERROR INESPERADO', error, 'error');\n      }); // (this.dataSource.data = res as PerfilI[])\n    }\n\n    cargaUsuario() {\n      this.usuarioService.getDataUsuario().subscribe(res => {\n        console.log('usuario:', res['data']);\n        this.datoUsuario = res['data'];\n      }, // console.log('yo:', res as PerfilI[]),\n      error => {\n        console.log('error carga:', error);\n        Swal.fire('ERROR INESPERADO', error, 'error');\n      }); // (this.dataSource.data = res as PerfilI[])\n    }\n\n    cargaCliente() {\n      this.clienteService.getDataCliente(this.currentUsuario.usuarioDato.empresa_Id).subscribe(res => {\n        console.log('cliente:', res['data']);\n        this.datoCliente = res['data'];\n      }, // console.log('yo:', res as PerfilI[]),\n      error => {\n        console.log('error carga:', error);\n        Swal.fire('ERROR INESPERADO', error, 'error');\n      }); // (this.dataSource.data = res as PerfilI[])\n    }\n\n    cargaEspecie() {\n      this.especieService.getDataEspecie(this.data.this.currentUsuario.usuarioDato.empresa_Id).subscribe(res => {\n        console.log('especie:', res['data']);\n        this.datoEspecie = res['data'];\n      }, // console.log('yo:', res as PerfilI[]),\n      error => {\n        console.log('error carga:', error);\n        Swal.fire('ERROR INESPERADO', error, 'error');\n      }); // (this.dataSource.data = res as PerfilI[])\n    }\n\n    cargaClienteDoctorSolicitante(idCliente) {\n      this.doctorSolicitanteService.getDataClienteDoctorSolicitante(idCliente).subscribe(res => {\n        console.log('dr solicitante:', res['data']);\n        this.datoDoctorSolicitante = res['data'];\n      }, // console.log('yo:', res as PerfilI[]),\n      error => {\n        console.log('error carga:', error);\n        Swal.fire('ERROR INESPERADO', error, 'error');\n      }); // (this.dataSource.data = res as PerfilI[])\n    }\n\n    cargaRaza() {\n      this.razaService.getDataRaza(this.data.empresa_Id).subscribe(res => {\n        console.log('raza:', res['data']);\n        this.datoRaza = res['data'];\n      }, // console.log('yo:', res as PerfilI[]),\n      error => {\n        console.log('error carga:', error);\n        Swal.fire('ERROR INESPERADO', error, 'error');\n      }); // (this.dataSource.data = res as PerfilI[])\n    }\n\n    seleccionaUsuario(p) {\n      return;\n    }\n\n    seleccionaExamen(p) {\n      return __awaiter(this, void 0, void 0, function* () {\n        /*    if (p.nombre.toUpperCase()==\"HEMOGRAMA\")\r\n                this.hemograma=true;\r\n                        console.log('datos examen selec:',p)\r\n            this.examen= {\r\n              idExamen:p._id,\r\n              codigoExamen: p.codigoExamen,\r\n              nombre: p.nombre\r\n            }\r\n                       this.enviar()\r\n           */\n        return;\n      });\n    }\n\n    seleccionaCliente(p) {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log('cliente', p);\n        yield this.cargaClienteDoctorSolicitante(p._id);\n        /*\r\n        this.cliente= {\r\n          idCliente:p._id,\r\n          rutCliente: p.rutCliente,\r\n          razonSocial: p.razonSocial,\r\n          nombreFantasia: p.nombreFantasia\r\n        }\r\n        */\n\n        return;\n      });\n    }\n\n    chkHemograma(event) {\n      console.log('valor chk:', event);\n      if (event) this.visibleHemograma = true;else this.visibleHemograma = false;\n    }\n\n    chkExamen1(event) {\n      console.log('valor chk:', event);\n      if (event) this.visibleExamen1 = true;else this.visibleExamen1 = false;\n    }\n\n    chkExamen2(event) {\n      console.log('valor chk:', event);\n      if (event) this.visibleExamen2 = true;else this.visibleExamen2 = false;\n    }\n\n    enviar() {\n      console.log('examen:', this.agregaFicha.get('idExamen').value.codigoExamen);\n      console.log('cliente:', this.agregaFicha.get('idCliente').value);\n\n      for (var x of this.datoExamen) {\n        console.log(x);\n        this.examen = {\n          idExamen: this.agregaFicha.get('idExamen').value._id,\n          codigoExamen: this.agregaFicha.get('idExamen').value.codigoExamen,\n          nombre: this.agregaFicha.get('idExamen').value.nombre\n        };\n      }\n\n      this.cliente = {\n        idCliente: this.agregaFicha.get('idCliente').value._id,\n        rutCliente: this.agregaFicha.get('idCliente').value.rutCliente,\n        razonSocial: this.agregaFicha.get('idCliente').value.razonSocial,\n        nombreFantasia: this.agregaFicha.get('idCliente').value.nombreFantasia\n      };\n      this.especie = {\n        idEspecie: this.agregaFicha.get('idEspecie').value._id,\n        nombre: this.agregaFicha.get('idEspecie').value.nombre.toUpperCase()\n      };\n      this.raza = {\n        idRaza: this.agregaFicha.get('idRaza').value._id,\n        nombre: this.agregaFicha.get('idRaza').value.nombre.toUpperCase()\n      };\n      this.doctorSolicitante = {\n        idDoctorSolicitante: this.agregaFicha.get('idDoctorSolicitante').value._id,\n        nombreDoctorSolicitante: this.agregaFicha.get('idDoctorSolicitante').value.nombre.toUpperCase()\n      };\n      this.datoFicha = {\n        fichaC: {\n          cliente: this.cliente,\n          nombrePropietario: this.agregaFicha.get('nombrePropietario').value.toUpperCase(),\n          nombrePaciente: this.agregaFicha.get('nombrePaciente').value.toUpperCase(),\n          edadPaciente: this.agregaFicha.get('edad').value,\n          especie: this.especie,\n          raza: this.raza,\n          sexo: this.agregaFicha.get('sexo').value.toUpperCase(),\n          doctorSolicitante: this.doctorSolicitante,\n          examen: this.examen\n        },\n        empresa_Id: this.currentUsuario.usuarioDato.empresa_Id,\n        usuarioCrea_id: this.usuario,\n        usuarioModifica_id: this.usuario\n      };\n      console.log('agrega 1:', this.datoFicha);\n      this.fichaService.postDataFicha(this.datoFicha).subscribe(dato => {\n        if (dato.codigo === 200) {\n          Swal.fire('Se agregÃ³ con Ãxito', 'Click en BotÃ³n!', 'success'); // ,\n\n          this.dialogRef.close(1);\n        } else {\n          if (dato.codigo != 500) {\n            Swal.fire(dato.mensaje, 'Click en BotÃ³n!', 'error');\n          } else {\n            console.log('Error Ficha:', dato);\n            Swal.fire('', 'ERROR SISTEMA', 'error');\n          }\n        }\n      });\n    } // Error handling\n\n\n    cerrar() {// this.dialogRef.close();\n    }\n\n  }\n\n  AgregaFichaComponent.Éµfac = function AgregaFichaComponent_Factory(t) {\n    return new (t || AgregaFichaComponent)(i0.ÉµÉµdirectiveInject(i1.MatDialogRef), i0.ÉµÉµdirectiveInject(MAT_DIALOG_DATA), i0.ÉµÉµdirectiveInject(i2.ExamenService), i0.ÉµÉµdirectiveInject(i3.UsuarioService), i0.ÉµÉµdirectiveInject(i4.ClienteService), i0.ÉµÉµdirectiveInject(i5.EspecieService), i0.ÉµÉµdirectiveInject(i6.RazaService), i0.ÉµÉµdirectiveInject(i7.DoctorSolicitanteService), i0.ÉµÉµdirectiveInject(i8.FichaService), i0.ÉµÉµdirectiveInject(i9.AuthenticationService));\n  };\n\n  AgregaFichaComponent.Éµcmp = /*@__PURE__*/i0.ÉµÉµdefineComponent({\n    type: AgregaFichaComponent,\n    selectors: [[\"app-agrega-ficha\"]],\n    decls: 0,\n    vars: 0,\n    template: function AgregaFichaComponent_Template(rf, ctx) {},\n    styles: [\".agrega-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;padding:0 10%}.agrega-container[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{width:95%}.mat-form-field[_ngcontent-%COMP%]{display:block!important}input[_ngcontent-%COMP%]{width:95%}.colorFondoBoton[_ngcontent-%COMP%]{color:#fff;background-color:#000}.mat-raised-button[_ngcontent-%COMP%]{min-width:100%}.mat-dialog-container[_ngcontent-%COMP%]{padding:50px!important}.mat-dialog-content[_ngcontent-%COMP%]{margin:auto}.lineaCuadrada[_ngcontent-%COMP%]{border-style:solid;border-width:1px;border-color:#000}.lineaDerecha[_ngcontent-%COMP%]{border-right:solid;border-width:1px;border-color:#000}.lineaIzquierda[_ngcontent-%COMP%]{border-left:solid;border-width:1px;border-color:#000}.lineaInferior[_ngcontent-%COMP%]{border-bottom:solid;border-width:1px;border-color:#000}.alineaVertical[_ngcontent-%COMP%]{display:flex;align-items:center}\"]\n  });\n  return AgregaFichaComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}