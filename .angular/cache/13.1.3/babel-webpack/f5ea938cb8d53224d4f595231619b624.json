{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateRut = exports.validateRutList = exports.validateRut = exports.calculateRutVerifier = exports.formatRut = exports.RutFormat = exports.deconstructRut = exports.getRutVerifier = exports.getRutDigits = exports.cleanRut = exports.isSuspiciousRut = exports.isRutLike = void 0;\n\nconst rutLikePattern = () => /^(\\d{0,2})\\.?(\\d{3})\\.?(\\d{3})-?(\\d|k)$/gi;\n\nconst suspiciousRutPattern = () => /^(\\d)\\1?\\.?(\\1{3})\\.?(\\1{3})-?(\\d|k)?$/gi;\n\nconst isRutLike = rut => rutLikePattern().test(rut);\n\nexports.isRutLike = isRutLike;\n\nconst isSuspiciousRut = rut => suspiciousRutPattern().test(rut);\n\nexports.isSuspiciousRut = isSuspiciousRut;\n\nconst cleanRut = rut => exports.isRutLike(rut) ? rut.replace(/[^0-9k]/gi, '') : '';\n\nexports.cleanRut = cleanRut;\n\nconst getRutDigits = rut => exports.cleanRut(rut).slice(0, -1);\n\nexports.getRutDigits = getRutDigits;\n\nconst getRutVerifier = rut => exports.cleanRut(rut).slice(-1);\n\nexports.getRutVerifier = getRutVerifier;\n\nconst deconstructRut = rut => ({\n  digits: exports.getRutDigits(rut),\n  verifier: exports.getRutVerifier(rut)\n});\n\nexports.deconstructRut = deconstructRut;\nvar RutFormat;\n\n(function (RutFormat) {\n  RutFormat[RutFormat[\"DOTS\"] = 0] = \"DOTS\";\n  RutFormat[RutFormat[\"DASH\"] = 1] = \"DASH\";\n  RutFormat[RutFormat[\"DOTS_DASH\"] = 2] = \"DOTS_DASH\";\n})(RutFormat = exports.RutFormat || (exports.RutFormat = {}));\n\nconst formatRut = (rut, format = RutFormat.DASH) => {\n  if (!exports.isRutLike(rut)) return rut;\n\n  switch (format) {\n    case RutFormat.DOTS:\n      return rut.replace(rutLikePattern(), (...args) => `${args[1] ? `${args[1]}.` : ''}${args[2]}.${args[3]}${args[4]}`);\n\n    case RutFormat.DASH:\n      return rut.replace(rutLikePattern(), '$1$2$3-$4');\n\n    case RutFormat.DOTS_DASH:\n      return rut.replace(rutLikePattern(), (...args) => `${args[1] ? `${args[1]}.` : ''}${args[2]}.${args[3]}-${args[4]}`);\n\n    default:\n      return rut.replace(rutLikePattern(), '$1$2$3$4');\n  }\n};\n\nexports.formatRut = formatRut;\n\nconst calculateRutVerifier = digits => {\n  let sum = 0;\n  let mul = 2;\n  let i = digits.length;\n\n  while (i--) {\n    sum = sum + parseInt(digits.charAt(i)) * mul;\n\n    if (mul % 7 === 0) {\n      mul = 2;\n    } else {\n      mul++;\n    }\n  }\n\n  const res = sum % 11;\n\n  if (res === 0) {\n    return '0';\n  } else if (res === 1) {\n    return 'k';\n  }\n\n  return `${11 - res}`;\n};\n\nexports.calculateRutVerifier = calculateRutVerifier;\n\nconst validateRut = (rut, noSuspicious = true) => {\n  if (!exports.isRutLike(rut)) return false;\n  if (noSuspicious && exports.isSuspiciousRut(rut)) return false;\n  return exports.getRutVerifier(rut) === exports.calculateRutVerifier(exports.getRutDigits(rut));\n};\n\nexports.validateRut = validateRut;\n\nconst validateRutList = (ruts, noSuspicious = true) => {\n  return ruts.reduce((result, rut) => {\n    result.set(rut, exports.validateRut(rut, noSuspicious));\n    return result;\n  }, new Map());\n};\n\nexports.validateRutList = validateRutList;\n\nconst generateRut = () => {\n  const digits = Math.floor(10000003 + Math.random() * 90000000).toString();\n  const verifier = exports.calculateRutVerifier(digits);\n  return exports.formatRut(digits + verifier);\n};\n\nexports.generateRut = generateRut; //# sourceMappingURL=main.js.map","map":null,"metadata":{},"sourceType":"script"}