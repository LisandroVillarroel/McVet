{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor() {}\n\n    intercept(request, next) {\n      // array in local storage for registered users\n      const users = JSON.parse(localStorage.getItem('users')) || []; // wrap in delayed observable to simulate server api call\n\n      return of(null).pipe(mergeMap(() => {\n        // authenticate\n        if (request.url.endsWith('/users/authenticate') && request.method === 'POST') {\n          // find if any user matches login credentials\n          const filteredUsers = users.filter(user => {\n            return user.username === request.body.username && user.password === request.body.password;\n          });\n\n          if (filteredUsers.length) {\n            // if login details are valid return 200 OK with user details and fake jwt token\n            const user = filteredUsers[0];\n            const body = {\n              id: user.id,\n              username: user.username,\n              firstName: user.firstName,\n              lastName: user.lastName,\n              token: 'fake-jwt-token'\n            };\n            return of(new HttpResponse({\n              status: 200,\n              body: body\n            }));\n          } else {\n            // else return 400 bad request\n            return throwError({\n              error: {\n                message: 'Username or password is incorrect'\n              }\n            });\n          }\n        } // get users\n\n\n        if (request.url.endsWith('/users') && request.method === 'GET') {\n          // check for fake auth token in header and return users if valid,\n          // this security is implemented server side in a real application\n          if (request.headers.get('Authorization') === 'Bearer fake-jwt-token') {\n            return of(new HttpResponse({\n              status: 200,\n              body: users\n            }));\n          } else {\n            // return 401 not authorised if token is null or invalid\n            return throwError({\n              status: 401,\n              error: {\n                message: 'No Autorizado'\n              }\n            });\n          }\n        } // get user by id\n\n\n        if (request.url.match(/\\/users\\/\\d+$/) && request.method === 'GET') {\n          // check for fake auth token in header and return user if valid,\n          // this security is implemented server side in a real application\n          if (request.headers.get('Authorization') === 'Bearer fake-jwt-token') {\n            // find user by id in users array\n            const urlParts = request.url.split('/'); // tslint:disable-next-line:radix\n\n            const id = parseInt(urlParts[urlParts.length - 1]); // tslint:disable-next-line:no-shadowed-variable\n\n            const matchedUsers = users.filter(user => {\n              return user.id === id;\n            });\n            const user = matchedUsers.length ? matchedUsers[0] : null;\n            return of(new HttpResponse({\n              status: 200,\n              body: user\n            }));\n          } else {\n            // return 401 not authorised if token is null or invalid\n            return throwError({\n              status: 401,\n              error: {\n                message: 'No Autorizado'\n              }\n            });\n          }\n        } // register user\n\n\n        if (request.url.endsWith('/users/register') && request.method === 'POST') {\n          // get new user object from post body\n          const newUser = request.body; // validation\n\n          const duplicateUser = users.filter(user => {\n            return user.username === newUser.username;\n          }).length;\n\n          if (duplicateUser) {\n            return throwError({\n              error: {\n                message: 'Username \"' + newUser.username + '\" is already taken'\n              }\n            });\n          } // save new user\n\n\n          newUser.id = users.length + 1;\n          users.push(newUser);\n          localStorage.setItem('users', JSON.stringify(users)); // respond 200 OK\n\n          return of(new HttpResponse({\n            status: 200\n          }));\n        } // delete user\n\n\n        if (request.url.match(/\\/users\\/\\d+$/) && request.method === 'DELETE') {\n          // check for fake auth token in header and return user if valid,\n          // this security is implemented server side in a real application\n          if (request.headers.get('Authorization') === 'Bearer fake-jwt-token') {\n            // find user by id in users array\n            const urlParts = request.url.split('/'); // tslint:disable-next-line:radix\n\n            const id = parseInt(urlParts[urlParts.length - 1]);\n\n            for (let i = 0; i < users.length; i++) {\n              const user = users[i];\n\n              if (user.id === id) {\n                // delete user\n                users.splice(i, 1);\n                localStorage.setItem('users', JSON.stringify(users));\n                break;\n              }\n            } // respond 200 OK\n\n\n            return of(new HttpResponse({\n              status: 200\n            }));\n          } else {\n            // return 401 not authorised if token is null or invalid\n            return throwError({\n              status: 401,\n              error: {\n                message: 'Unauthorised'\n              }\n            });\n          }\n        } // pass through any requests not handled above\n\n\n        return next.handle(request);\n      })) // call materialize and dematerialize to ensure delay even\n      // if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648)\n      .pipe(materialize()).pipe(delay(500)).pipe(dematerialize());\n    }\n\n  }\n\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)();\n  };\n\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport let fakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":null,"metadata":{},"sourceType":"module"}