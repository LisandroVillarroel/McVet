{"ast":null,"code":"import { ɵɵdefineInjectable, ɵsetClassMetadata, Injectable, EventEmitter, ɵɵdefineComponent, ɵɵelementStart, ɵɵlistener, ɵɵelementEnd, ɵɵtext, ɵɵproperty, ɵɵadvance, ɵɵtextInterpolate1, Component, Output, Input, ɵɵdefineNgModule, ɵɵdefineInjector, ɵɵsetNgModuleScope, NgModule } from '@angular/core';\nimport { DefaultValueAccessor, NgControlStatus, NgModel, FormsModule } from '@angular/forms';\nlet RutService = /*#__PURE__*/(() => {\n  class RutService {\n    constructor() {}\n\n    rutFormat(value) {\n      const rut = this.rutClean(value);\n\n      if (rut.length <= 1) {\n        return;\n      }\n\n      let result = `${rut.slice(-4, -1)}-${rut.substr(rut.length - 1)}`;\n\n      for (let i = 4; i < rut.length; i += 3) {\n        result = `${rut.slice(-3 - i, -i)}.${result}`;\n      }\n\n      return result;\n    }\n\n    rutClean(value) {\n      return typeof value === 'string' ? value.replace(/[^0-9kK]+/g, '').toUpperCase() : '';\n    }\n\n    validaRUT(rut) {\n      let valor = rut;\n      valor = this.rutClean(valor); // Aislar Cuerpo y Dígito Verificador\n\n      const cuerpo = valor.slice(0, -1);\n      let dv = valor.slice(-1).toUpperCase(); // Si no cumple con el mínimo ej. (n.nnn.nnn)\n\n      if (cuerpo.length < 7 && cuerpo.length >= 0) {\n        return true;\n      } // Calcular Dígito Verificador\n\n\n      let suma = 0;\n      let multiplo = 2; // Para cada dígito del Cuerpo\n\n      for (let i = 1; i <= cuerpo.length; i++) {\n        // Obtener su Producto con el Múltiplo Correspondiente\n        const index = multiplo * Number(valor.charAt(cuerpo.length - i)); // Sumar al Contador General\n\n        suma = suma + index; // Consolidar Múltiplo dentro del rango [2,7]\n\n        if (multiplo < 7) {\n          multiplo = multiplo + 1;\n        } else {\n          multiplo = 2;\n        }\n      } // Calcular Dígito Verificador en base al Módulo 11\n\n\n      const dvEsperado = 11 - suma % 11; // Casos Especiales (0 y K)\n\n      dv = dv === 'K' ? '10' : dv;\n      dv = dv === '0' ? '11' : dv; // Validar que el Cuerpo coincide con su Dígito Verificador\n\n      if (dvEsperado.toString() !== dv && cuerpo.length >= 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    getRutChile(mode, rut) {\n      if (!this.validaRUT(rut)) {\n        switch (mode) {\n          // el rut limpio 184215551\n          case 0:\n            return this.rutClean(rut);\n          // solo el cuerpo del rut  18421555\n\n          case 1:\n            let valor = rut;\n            valor = this.rutClean(valor);\n            let cuerpo = valor.slice(0, -1);\n            return cuerpo;\n          // rut formateado 18.421.555-1\n\n          case 2:\n            return this.rutFormat(rut);\n          // rut cuerpo - digitov : 18421555-1  \n\n          case 3:\n            let r = rut;\n            r = this.rutClean(r);\n            const c = r.slice(0, -1);\n            let dv = r.slice(-1).toUpperCase();\n            return c + '-' + dv;\n\n          case 4:\n            let ru = rut;\n            ru = this.rutClean(ru);\n            let div = ru.slice(-1).toUpperCase();\n            return div;\n        }\n      } else {\n        return false;\n      }\n    }\n\n  }\n\n  RutService.ɵfac = function RutService_Factory(t) {\n    return new (t || RutService)();\n  };\n\n  RutService.ɵprov = ɵɵdefineInjectable({\n    token: RutService,\n    factory: RutService.ɵfac,\n    providedIn: 'root'\n  });\n  /*@__PURE__*/\n\n  return RutService;\n})();\n\n(function () {\n  void 0;\n})();\n\nlet RutComponent = /*#__PURE__*/(() => {\n  class RutComponent {\n    constructor() {\n      this.rut_emiter = new EventEmitter();\n    }\n\n    ngOnInit() {\n      if (!this.msjError) this.msjE = \"El rut ingresado no es válido.\";else this.msjE = this.msjError;\n    }\n\n    rutFormat(value) {\n      const rut = this.rutClean(value);\n\n      if (rut.length <= 1) {\n        return;\n      }\n\n      let result = `${rut.slice(-4, -1)}-${rut.substr(rut.length - 1)}`;\n\n      for (let i = 4; i < rut.length; i += 3) {\n        result = `${rut.slice(-3 - i, -i)}.${result}`;\n      }\n\n      this.rut_chileno = result;\n    }\n\n    rutClean(value) {\n      return typeof value === 'string' ? value.replace(/[^0-9kK]+/g, '').toUpperCase() : '';\n    }\n\n    validaRUT(rut) {\n      this.validacionRut = this.validaRUT_(rut);\n      this.sendEmiterRut(this.rut_chileno);\n    }\n\n    validaRUT_(rut) {\n      let valor = rut;\n      valor = this.rutClean(valor);\n      const cuerpo = valor.slice(0, -1);\n      let dv = valor.slice(-1).toUpperCase();\n\n      if (cuerpo.length < 7 && cuerpo.length >= 0) {\n        return true;\n      }\n\n      let suma = 0;\n      let multiplo = 2;\n\n      for (let i = 1; i <= cuerpo.length; i++) {\n        const index = multiplo * Number(valor.charAt(cuerpo.length - i));\n        suma = suma + index;\n\n        if (multiplo < 7) {\n          multiplo = multiplo + 1;\n        } else {\n          multiplo = 2;\n        }\n      }\n\n      const dvEsperado = 11 - suma % 11;\n      dv = dv === 'K' ? '10' : dv;\n      dv = dv === '0' ? '11' : dv;\n      if (dvEsperado.toString() !== dv && cuerpo.length >= 0) return true;else return false;\n    }\n\n    sendEmiterRut(rut) {\n      if (!this.validacionRut) {\n        switch (this.mode) {\n          case 0:\n            this.rut_emiter.emit(this.rutClean(rut));\n            break;\n\n          case 1:\n            let valor = rut;\n            this.rut_emiter.emit(this.rutClean(valor).slice(0, -1));\n            break;\n\n          case 2:\n            this.rut_emiter.emit(rut);\n            break;\n\n          case 3:\n            let r = rut;\n            this.rut_emiter.emit(this.rutClean(r).slice(0, -1) + '-' + r.slice(-1).toUpperCase());\n            break;\n\n          case 4:\n            let ru = rut;\n            this.rut_emiter.emit(this.rutClean(ru).slice(-1).toUpperCase());\n            break;\n        }\n      }\n    }\n\n  }\n\n  RutComponent.ɵfac = function RutComponent_Factory(t) {\n    return new (t || RutComponent)();\n  };\n\n  RutComponent.ɵcmp = ɵɵdefineComponent({\n    type: RutComponent,\n    selectors: [[\"rut-chile\"]],\n    inputs: {\n      mode: \"mode\",\n      msjError: \"msjError\"\n    },\n    outputs: {\n      rut_emiter: \"rut_emiter\"\n    },\n    decls: 3,\n    vars: 3,\n    consts: [[\"type\", \"text\", \"name\", \"username\", \"id\", \"rut_chileno\", \"placeholder\", \"Rut\", 1, \"input-rut\", \"rut\", 3, \"ngModel\", \"ngModelChange\", \"focus\", \"keydown\", \"keyup\", \"keypress\", \"blur\"], [1, \"danger-rut\", 3, \"hidden\"]],\n    template: function RutComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵɵelementStart(0, \"input\", 0);\n        ɵɵlistener(\"ngModelChange\", function RutComponent_Template_input_ngModelChange_0_listener($event) {\n          return ctx.rut_chileno = $event;\n        })(\"focus\", function RutComponent_Template_input_focus_0_listener($event) {\n          return ctx.rutFormat($event.target.value);\n        })(\"keydown\", function RutComponent_Template_input_keydown_0_listener($event) {\n          return ctx.rutFormat($event.target.value);\n        })(\"keyup\", function RutComponent_Template_input_keyup_0_listener($event) {\n          return ctx.rutFormat($event.target.value);\n        })(\"keypress\", function RutComponent_Template_input_keypress_0_listener($event) {\n          return ctx.validaRUT($event.target.value);\n        })(\"blur\", function RutComponent_Template_input_blur_0_listener($event) {\n          return ctx.validaRUT($event.target.value);\n        });\n        ɵɵelementEnd();\n        ɵɵelementStart(1, \"small\", 1);\n        ɵɵtext(2);\n        ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵɵproperty(\"ngModel\", ctx.rut_chileno);\n        ɵɵadvance(1);\n        ɵɵproperty(\"hidden\", !ctx.validacionRut);\n        ɵɵadvance(1);\n        ɵɵtextInterpolate1(\" \", ctx.msjE, \" \");\n      }\n    },\n    directives: [DefaultValueAccessor, NgControlStatus, NgModel],\n    encapsulation: 2\n  });\n  /*@__PURE__*/\n\n  return RutComponent;\n})();\n\n(function () {\n  void 0;\n})();\n\nlet RutModule = /*#__PURE__*/(() => {\n  class RutModule {}\n\n  RutModule.ɵmod = ɵɵdefineNgModule({\n    type: RutModule\n  });\n  RutModule.ɵinj = ɵɵdefineInjector({\n    factory: function RutModule_Factory(t) {\n      return new (t || RutModule)();\n    },\n    imports: [[FormsModule]]\n  });\n  return RutModule;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵɵsetNgModuleScope(RutModule, {\n    declarations: [RutComponent],\n    imports: [FormsModule],\n    exports: [RutComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  void 0;\n})();\n/*\n * Public API Surface of rut\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { RutComponent, RutModule, RutService }; //# sourceMappingURL=rut-chileno.js.map","map":null,"metadata":{},"sourceType":"module"}